R1.
What happens when you initialize a repository? Why do you need to do it?
A.
The folder is setup as a git repository. the file ".git" is added, which is actually a subfolder, to contain coniguration information

R2.
How is the staging area different from the working directory and the repository? What value do you think it offers?
A. the working directory is the location of the current version of all files in the repository
The staging area contains files that have been added to the repository but not yet committed. 

R2.
How can you use the staging area to make sure you have one commit per logical change?
A. First do a "git add" to move the files included in the logical change, then commit only those files, while other changed files
remain in the working area.

R3.
What are some situations when branches would be helpful in keeping your history organized? How would branches help?
A.
. making backups
. new language versions

The branch names help identify the reason for the branch


R4.
How do the diagrams help you visualize the branch structure?
A.
the branch diagram show the commits and their parents and how they are connected

R5.
What is the result of merging two branches together? Why do we represent it in the diagram the way we do?
A.
Merging 2 files means merging all changes in both files together so the result is one master branch containing all changes in chronological order
In the diagram the merge is represented by 2 branches becoming 1 and this is shown in the graph

R6.
What are the pros and cons of Gitâ€™s automatic merging vs. always doing merges manually?
A.
Git only automatically merges if there are no conflicts. The pro is that it does not try to guess how to resolve a conflict.
Guessing how to resolve is very difficult and would result in errors
The con is that git requires the developer to manually resolve a conflict which can sometimes seem obvious.


