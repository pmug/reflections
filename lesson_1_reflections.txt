Reflection 1.
How did viewing a diff between two versions of a file help you see the bug that was introduced?
A.
Diff removed most lines that had not changes.
As well, Diff shows the lines before and after the change
Also, line numbers are shown.

R2.How could having easy access to the entire history of a file make you a more efficient programmer in the long term?
A.
a. centralised location for all versions makes access easy and difficult to lose old versions
b. easy to change back or forward when errors occur
c. easier to collaborate with a team

Examples of version control systems:
a. manual (not advised)
b. dropbox (deletes old versions after 30 days)
c. Google docs (complete history)
d. Wikipedia (complete history)

R3.
a.You commit all the changes required to add a new feature, which you’ve been working on for a week. You haven’t committed since you started working on it.
b.You find three typos in your README. You fix and commit the first.
c.You commit all the changes required to add a new feature, which you’ve been working on for an hour.
d.You fix two small bugs in different functions and commit them both at once.

a.probably should commit more frequently, "all changes" sounds like there are several logical changes, so each should be committed separately.
	Also waiting a week before a commit sounds like there will be a lot of changes in that commit.
b.should only be one commit for the 3 typos
c.sounds ok, since committing more often would slow you down
d.may be worth committing them separately

R4.
What do you think are the pros and cons of manually choosing when to create a commit, like you do in Git, vs having versions automatically saved, like Google Docs does?

R.
Now that you have your workspace set up, what do you want to try using Git for?
A. adding new versions of some code
Also, creating a new repository and using GiHub

******************************
